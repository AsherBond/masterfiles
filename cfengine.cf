##################################################################
#
# CFEngine internal services
#
# Do not edit this file. It will be maintained by CFEngine AS
#
##################################################################
##################################################################
#
# cfengine_processes 
# - restart CFE processes by specific time (not in service)
#
##################################################################
bundle agent cfengine_processes
{
 vars:

   "cf_components"   slist => { 
                               "cf-key", 
                               "cf-know", 
                               "cf-monitord", 
                               "cf-promises",
                               "cf-report", 
                               "cf-runagent", 
                               "cf-serverd", 
                               "cf-hub" 
                              },
                   comment => "Define all cfengine robot agents",
                    handle => "cfengine_processes_vars_cf_components";

  windows::

   "stop_signal"  string => "kill",
                 comment => "Define a stop signal for Windows",
                  handle => "cfengine_processes_vars_stop_signal_windows";

  !windows::

   "stop_signal"  string => "term",
                 comment => "Define a stop signal for *NIX",
                  handle => "cfengine_processes_vars_stop_signal_unix";

#

 classes:
#  NOTE: We do not restart by default, can be added if desired
#  "restart_cf" expression => "Monday.Hr05.Min00_05",
#                  comment => "Define a class to restart cfengine processes",
#                   handle => "cfengine_processes_classes_restart_cf";

#

 processes:

  restart_cf::

   "$(cf_components)" 

      signals => { "$(stop_signal)" },
      comment => "Kill cfengine processes",
       handle => "cfengine_processes_stop_cf_components";

  restart_cf.!windows::

    "cf-execd"  
       signals => { "$(stop_signal)" },
       comment => "Kill cf-execd process on *NIX",
        handle => "cfengine_processes_stop_cf_execd";

#

 commands:

  restart_cf.!windows::

   "$(sys.cf_execd)"
      comment => "Restart cf-execd process",
       handle => "cfengine_processes_commands_cf_execd";

#

 services:

  restart_cf.windows::

   "CfengineNovaExec"
      service_policy => "stop",
             comment => "Stop the executor service, part of scheduled restart",
              handle => "cfengine_processes_services_stop_cf_execd_windows";

   "CfengineNovaExec"
      service_policy => "start",
             comment => "Start the executor service, part of scheduled restart",
              handle => "cfengine_processes_services_start_cf_execd_windows";

#

 reports:

  restart_cf::
    
   "Reloaded configuration of all Cfengine components",
      comment => "Alert restarting message",
       handle => "cfengine_processes_reports";

}

##################################################################
#
# cfengine_enable 
# - start CFE agents when booting (not in service)
#
##################################################################

bundle agent cfengine_enable
{
 vars:

  freebsd::

   "rc_conf[cfengine_enable]"   string => "\"YES\"",
                               comment => "Define a variable to start cfengine at boot time",
                                handle => "cfengine_enable_vars_rc_conf_freebsd";

  netbsd::

   "rc_conf[cfengine_enable]"  string => "\"YES\"",
                              comment => "Define a variable to start cfengine at boot time",
                               handle => "cfengine_enable_vars_rc_conf_netbsd";
 
  linux::

   "rc_files"   slist => {
                          "/etc/rc1.d/K11cfengine3",
                          "/etc/rc2.d/S90cfengine3",
                          "/etc/rc3.d/S90cfengine3",
                          "/etc/rc4.d/S90cfengine3",
                          "/etc/rc5.d/S90cfengine3",
                          "/etc/rc6.d/K11cfengine3"
                         },
              comment => "Define a list of rc files on Linux",
               handle => "cfengine_enable_vars_rc_files";

#
 
 files:

  freebsd::

   "/usr/local/etc/rc.d/cfengine3.sh"
      comment => "Ensure that the cfengine rc.d script is executable",
       handle => "cfengine_enable_files_cfengine3_sh_freebsd",
        perms => mog("755", "root", "wheel");
 
   "/etc/rc.conf"
        comment => "cfengine libraries should be enabled in rc.conf if appropriate",
         handle => "cfengine_enable_files_rc_conf_freebsd_1",
      edit_line => append_if_no_line("[ -e /var/cfengine/lib ] && /sbin/ldconfig -m /var/cfengine/lib");

   "/etc/rc.conf"
        comment => "cfengine should be enabled in rc.conf",
         handle => "cfengine_enable_files_rc_conf_freebsd_2",
      edit_line => set_variable_values("cfengine_enable.rc_conf");

  netbsd::

   "/usr/local/etc/rc.d/cfengine3.sh"
      comment => "Ensure that the cfengine rc.d script is executable",
       handle => "cfengine_enable_files_cfengine3_sh_netbsd",
        perms => mog("755", "root", "wheel");

   "/etc/rc.d/cfengine"
        comment => "Move cfengine rc.d script to the correct location",
         handle => "cfengine_enable_files_rc_d_netbsd",
      copy_from => local_cp("/usr/local/etc/rc.d/cfengine3.sh");

   "/etc/rc.conf"
       comment => "cfengine should be enabled in rc.conf",
        handle => "cfengine_enable_files_rc_conf_netbsd",
     edit_line => set_variable_values("cfengine_enable.rc_conf");

  linux::

   "$(rc_files)"
        comment => "Ensure that startup scripts are properly linked",
         handle => "cfengine_enable_files_rc_files_linux",
      link_from => ln_s("/etc/init.d/cfengine3");
}

##################################################################
#
# cfengine_limit_rebot_agents
#  - kill CFE processes and restart it when the process grown  
#
##################################################################

bundle agent cfengine_limit_robot_agents
{
 processes:

  linux::

   "cf-execd"
      process_count => check_execd("2"),
            comment => "Check cf-execd process if exceed the number",
             handle => "cfengine_limit_robot_agents_processes_check_cf_execd";

   "cf-monitord"
      process_count => check_monitord("1"),
            comment => "Check cf-monitord process if exceed the number",
             handle => "cfengine_limit_robot_agents_processes_check_cf_monitord";
   
   #
   # Do not do this for cf-hub because cf-hub may have unlimited processes
   #

  something_wrong_execd::

   "cf-execd"
            signals => { "term", "kill" },
      restart_class => "restart_execd",
            comment => "When cf-execd comes undone then kill all and restart the process",
             handle => "cfengine_limit_robot_agents_processes_kill_cf_execd";

  something_wrong_monitord::

   "cf-monitord"
            signals => { "term", "kill" },
      restart_class => "restart_monitord",
            comment => "When cf-monitord comes undone then kill all and restart the process",
             handle => "cfengine_limit_robot_agents_processes_kill_cf_monitord";

#

 commands:

  restart_execd::

   "$(sys.cf_execd)"
      comment => "Restart cf-execd process",
       handle => "cfengine_limit_robot_agents_commands_restart_cf_execd";

  restart_monitord::

   "$(sys.cf_monitord)"
      comment => "Restart cf-monitord process",
       handle => "cfengine_limit_robot_agents_commands_restart_cf_monitord";

}

#

body process_count check_execd(n)
{
match_range => "0,$(n)";
out_of_range_define => {"something_wrong_execd"};
}

body process_count check_monitord(n)
{
match_range => "0,$(n)";
out_of_range_define => {"something_wrong_monitord"};
}

##################################################################
#
# cfengine_update_folders
#  - create temp directories to make CFE silent (self-upgrading)  
#
##################################################################

bundle agent cfengine_update_folders
{
 vars:

  "dirs" slist => {
                   "ubuntu_10_i686",
                   "ubuntu_10_x86_64",
                   "ubuntu_11_i686",
                   "ubuntu_11_x86_64",
                   "centos_5_i686",
                   "centos_5_x86_64",
                   "redhat_5_i686",
                   "redhat_5_x86_64",
                   "redhat_6_i686",
                   "redhat_6_x86_64",
                   "suse_11_i686",
                   "suse_11_x86_64",
                   "debian_5_i686",
                   "debian_5_x86_64",
                   "debian_6_i686",
                   "debian_6_x86_64",
                   "debian_wheezy_i686",
                   "debian_wheeyz_x86_64"
                  },
       comment => "Define a list for $(sys.flavour)_$(sys.arch) directories",
        handle => "cfengine_update_folders_vars_dirs";

#

 files:

  "$(sys.workdir)/master_software_updates/$(dirs)/."
     comment => "Prepare binary upgrade folders for all distributions in our environment",
      handle => "cfengine_update_folders_files_create_dirs",
      create => "true";

}

##################################################################
#
# cfengine_correct_cftwin
#  - create cf-twin for self-upgrading purpose 
#
##################################################################

bundle agent cfengine_correct_cftwin
{
 files:

  !windows::

   "/var/cfengine/lib-twin"
           comment => "Correct lib-twin to be the same as lib, in case of dependency upgrade. This effect cf-twin's behaviour",
            handle => "cfengine_correct_cftwin_files_libtwin",
             perms => m("644"),
         copy_from => local_cp("/var/cfengine/lib"),
      depth_search => recurse("inf");

   "/var/cfengine/bin/cf-twin"
        comment => "Correct cf-twin to be the same as cf-agent, in case of dependency upgrade",
         handle => "cfengine_correct_cftwin_files_cftwin",
          perms => m("755"),
      copy_from => local_cp("/var/cfengine/bin/cf-agent");

}

##################################################################
#
# garbage_collection
#  - do some garbage collection on  
#
##################################################################

bundle agent garbage_collection
{
 files:

  Sunday::

   "$(sys.workdir)/cf_repair.log" 
      comment => "Rotate the promises repaired logs each week",
       handle => "garbage_collection_files_cf_repair_log",
       rename => rotate("7"),
       action => if_elapsed("10000");

   "$(sys.workdir)/cf_notkept.log" 
      comment => "Rotate the promises not kept logs each week",
       handle => "garbage_collection_files_cf_notkept_log",
       rename => rotate("7"),
       action => if_elapsed("10000");

   "$(sys.workdir)/promise_summary.log" 
      comment => "Rotate the promises not kept logs each week",
       handle => "garbage_collection_files_promise_log",
       rename => rotate("7"),
       action => if_elapsed("10000");

   "$(sys.workdir)/state/cf_value.log" 
      comment => "Rotate the promises not kept logs each week",
       handle => "garbage_collection_files_cf_value_log",
       rename => rotate("7"),
       action => if_elapsed("10000");

   "/var/log/mongod.log"
      comment => "Rotate the mongo db transactio logs each week",
       handle => "garbage_collection_files_mongod_log",
       rename => rotate("7"),
       action => if_elapsed("10000");

  any::

   "$(sys.workdir)/outputs" 
           comment => "Garbage collection of any output files",
            handle => "garbage_collection_files_tidy_outputs",
            delete => tidy,
       file_select => days_old("7"),
      depth_search => recurse("inf");

  # Other resources

   "/tmp" 
           comment => "Garbage collection of any temporary files",
            handle => "garbage_collection_files_tidy_tmp",
            delete => tidy,
       file_select => days_old("3"),
      depth_search => recurse("inf");
  
   "/var/log/apache2/.*bz" 
          comment => "Garbage collection of rotated log files",
           handle => "garbage_collection_files_tidy_bz",
           delete => tidy,
      file_select => days_old("30");


   "/var/log/apache2/.*gz" 
          comment => "Garbage collection of rotated log files",
           handle => "garbage_collection_files_tidy_gz",
           delete => tidy,
      file_select => days_old("30");

 SuSE::

   "/var/log/zypper.log"
      comment => "Prevent the zypper log from choking the disk",
       handle => "garbage_collection_files_zypper_log",
       rename => rotate("0"),
       action => if_elapsed("10000");

}
