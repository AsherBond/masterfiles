#######################################################
#
# Test packagesmatching()
#
# IMPORTANT!! This test depends on
# 11_packagesmatching.cf running first. This is because
# we need a fresh test directory with an empty package
# cache in order to test that packagesmatching updates
# that cache. If we install the package in the same
# policy, then the cache is already filled and the test
# is useless.
# Running a sub invocation does not work, because it
# still uses the same cache on disk.
#
#######################################################

body common control
{
      inputs => { "./packages-info.cf.sub", "../../default.cf.sub",
                  "../../../../inventory/any.cf", "../../../../lib/3.6/packages.cf" };
      bundlesequence  => { "inventory_autorun", default("$(this.promise_filename)") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
      "package_name" string => "$(p.name[1])";
      "package_version" string => "$(p.version[$(p.latest_version)])";
      "package_arch" string => "$(p.arch)";
}

#######################################################

bundle agent test
{
  vars:
      "all_packages" data => packagesmatching("$(init.package_name)",
                             ".*", ".*", ".*");
}

#######################################################

bundle agent check
{
  classes:
    any::
      "ok" expression => strcmp("$(test.all_packages[0])", "$(init.package_version)");

  reports:
    DEBUG::
      "package count check '$(test.all_packages[0])' != '$(init.package_version)'"
      ifvarclass => "!ok";

      "package count check '$(test.all_packages[0])' == '$(init.package_version)'"
      ifvarclass => "ok";

    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
}
