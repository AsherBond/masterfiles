body report_data_select default_data_select_host
# @brief Data to collect from remote hosts by default
# By convention variables and classes known to be internal, (having no
# reporting value) should be prefixed with an underscore. By default the policy
# framework explicitly excludes these variables and classes from collection.
{
      metatags_include => { "inventory", "report" };
      metatags_exclude => { "noreport" };
      monitoring_include => { "cpu.*",
                              "mem_total",
                              "mem_free",
                              "mem_cached",
                              "mem_swap",
                              "mem_freeswap",
                              "loadavg",
                              "diskfree" };
}

body report_data_select default_data_select_policy_hub
# @brief Data to collect from policy servers by default
# By convention variables and classes known to be internal, (having no
# reporting value) should be prefixed with an underscore. By default the policy
# framework explicitly excludes these variables and classes from collection.
{
      metatags_include => { "inventory", "report" };
      metatags_exclude => { "noreport" };

}

bundle agent cfe_internal_hub_maintain
# @brief Executes reporting database maintenance process
# By default database clean up interval is 24 hours.
# Length of log history in database is controlled
# by modifying "history_length_days" key in report_settings
# variable.
#
# Intervals less than 6 hours must be used with caution
# as maintenance process could take a considerable time 
{
    vars:
        "report_settings" data => parsejson('[
                                            { 
                                                "report": "contexts",
                                                "table": "__ContextsLog",
                                                "history_length_days": 7,
                                                "time_key": "ChangeTimeStamp"
                                            },
                                            { 
                                                "report": "variables",
                                                "table": "__VariablesLog",
                                                "history_length_days": 7,
                                                "time_key": "ChangeTimeStamp"
                                            },
                                            { 
                                                "report": "software",
                                                "table": "__SoftwareLog",
                                                "history_length_days": 28,
                                                "time_key": "ChangeTimeStamp"
                                            },
                                            { 
                                                "report": "software_updates",
                                                "table": "__SoftwareUpdatesLog",
                                                "history_length_days": 28,
                                                "time_key": "ChangeTimeStamp"
                                            },
                                            { 
                                                "report": "filechanges",
                                                "table": "__FileChangesLog",
                                                "history_length_days": 365,
                                                "time_key": "ChangeTimeStamp"
                                            },
                                            { 
                                                "report": "benchmarks",
                                                "table": "__BenchmarksLog",
                                                "history_length_days": 7,
                                                "time_key": "CheckTimeStamp"
                                            },
                                            { 
                                                "report": "promise_executions",
                                                "table": "__PromiseExecutionsLog",
                                                "history_length_days": 7,
                                                "time_key": "ChangeTimeStamp"
                                            }
                                           ]');

            "diagnostics_settings" data => parsejson('[
                                                     { 
                                                         "report": "hub_connection_errors",
                                                         "table": "__HubConnectionErrors",
                                                         "history_length_days": 1,
                                                         "time_key": "CheckTimeStamp"
                                                     },
                                                     { 
                                                         "report": "diagnostics",
                                                         "table": "__Diagnostics",
                                                         "history_length_days": 1,
                                                         "time_key": "TimeStamp"
                                                     }
                                                    ]');

    methods:
        Hr00.Min00_05::
            "Remove old report history"
                usebundle => cfe_internal_database_cleanup_reports("@(report_settings)"),
                action => if_elapsed(5);

            "Remove cf-consumer history"
                usebundle => cfe_internal_database_cleanup_consumer_status("50000"),
                action => if_elapsed(5);

            "Remove diagnostics history"
                usebundle => cfe_internal_database_cleanup_diagnostics("@(diagnostics_settings)"),
                action => if_elapsed(5);
}

bundle agent cfe_internal_database_cleanup_reports (settings)
{
    vars:
        "index" slist => getindices("settings");

        "remove_query_$(settings[$(index)][report])" 
            string =>   "DELETE FROM $(settings[$(index)][table]) AS T
                            USING (SELECT HostKey, 
                                          (LastAgentLocalExecutionTimestamp - INTERVAL '$(settings[$(index)][history_length_days]) day') AS purge_time 
                                   FROM __agentstatus) AS A
                            WHERE T.HostKey = A.HostKey AND T.$(settings[$(index)][time_key]) <= A.purge_time;";


    commands:
        "$(sys.workdir)/bin/psql cfdb -c \"$(remove_query_$(settings[$(index)][report]))\""
            handle => "cf_database_maintain_report_$(settings[$(index)][report])";
}

bundle agent cfe_internal_database_cleanup_consumer_status (row_count)
{
    # keep up to row_count entries in the database

    vars:
        "remove_query"
            string => "DELETE FROM status WHERE ts IN (SELECT ts FROM status ORDER BY ts DESC OFFSET $(row_count));";

    commands:
        "$(sys.workdir)/bin/psql cfdb -c \"$(remove_query)\""
            handle => "cf_database_maintain_consumer_status";
}

bundle agent cfe_internal_database_cleanup_diagnostics (settings)
{
    vars:
        "index" slist => getindices("settings");

        "remove_query_$(settings[$(index)][report])"
            string => "DELETE FROM $(settings[$(index)][table]) WHERE $(settings[$(index)][time_key]) < (CURRENT_TIMESTAMP - INTERVAL '$(settings[$(index)][history_length_days]) day');";

    commands:
        "$(sys.workdir)/bin/psql cfdb -c \"$(remove_query_$(settings[$(index)][report]))\""
            handle => "cf_database_maintain_diagnostics_$(settings[$(index)][report])";
}
